# Use Windows base with Visual Studio 2019 Build Tools pre-installed
FROM mcr.microsoft.com/dotnet/framework/sdk:4.8 AS windows-builder

ARG GDAL_VERSION=3.11.3

SHELL ["cmd", "/S", "/C"]

# Install CMake (Windows zip release)
RUN curl -Lo cmake.zip https://github.com/Kitware/CMake/releases/download/v3.29.3/cmake-3.29.3-windows-x86_64.zip && \
    powershell -Command "Expand-Archive cmake.zip -DestinationPath C:\cmake" && \
    setx PATH "%PATH%;C:\cmake\cmake-3.29.3-windows-x86_64\bin" && \
    del cmake.zip

# Download GDAL source
RUN curl -Lo gdal.zip https://github.com/OSGeo/gdal/releases/download/v%GDAL_VERSION%/gdal-%GDAL_VERSION%.zip && \
    powershell -Command "Expand-Archive gdal.zip -DestinationPath C:\gdal" && \
    del gdal.zip

WORKDIR C:\gdal\gdal-%GDAL_VERSION%

# Configure and build using VS 2019 MSBuild
RUN "C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\Common7\Tools\VsDevCmd.bat" && \
    mkdir build && cd build && \
    cmake .. -G "Visual Studio 16 2019" -A x64 \
    -DCMAKE_BUILD_TYPE=Release \
    -DBUILD_SHARED_LIBS=OFF \
    -DGDAL_USE_EXTERNAL_LIBS=OFF \
    -DGDAL_BUILD_OPTIONAL_DRIVERS=OFF \
    -DGDAL_USE_INTERNAL_LIBS=ON \
    -DBUILD_PYTHON_BINDINGS=OFF \
    -DBUILD_JAVA_BINDINGS=OFF \
    -DBUILD_CSHARP_BINDINGS=OFF && \
    cmake --build . --config Release --target install

# Create a runtime image with just the GDAL binaries
FROM mcr.microsoft.com/windows/nanoserver:ltsc2019 AS gdal-runtime

COPY --from=windows-builder "C:\\Program Files (x86)\\gdal" "C:\\gdal\\"
ENV PATH="C:\\gdal\\bin;%PATH%"
