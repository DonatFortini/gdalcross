# Stage 1: Builder
FROM mcr.microsoft.com/windows/servercore:ltsc2022 AS builder

ARG GDAL_VERSION=3.9.3
ARG PROJ_VERSION=9.5.0
ARG GEOS_VERSION=3.13.0

SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"]

RUN iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))

# take the longest
RUN choco install -y visualstudio2022-workload-vctools

RUN choco install -y cmake git curl 7zip ninja

WORKDIR C:/build

# Download all sources 
RUN Write-Host "Downloading SQLite..."; \
    curl.exe -L -o sqlite.zip https://www.sqlite.org/2023/sqlite-amalgamation-3430200.zip; \
    Write-Host "Downloading PROJ..."; \
    curl.exe -L -o proj.tar.gz https://download.osgeo.org/proj/proj-$env:PROJ_VERSION.tar.gz; \
    Write-Host "Downloading GEOS..."; \
    curl.exe -L -o geos.tar.bz2 https://download.osgeo.org/geos/geos-$env:GEOS_VERSION.tar.bz2; \
    Write-Host "Downloading GDAL..."; \
    curl.exe -L -o gdal.tar.gz https://github.com/OSGeo/gdal/releases/download/v$env:GDAL_VERSION/gdal-$env:GDAL_VERSION.tar.gz; \
    Write-Host "All downloads completed successfully"

# Build SQLite (static with /MT)
RUN Write-Host "Building SQLite..."; \
    7z x sqlite.zip; \
    cd sqlite-amalgamation-3430200; \
    $msvcPath = Get-ChildItem 'C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Tools\MSVC' | Sort-Object Name -Descending | Select-Object -First 1 -ExpandProperty FullName; \
    $sdkPath = Get-ChildItem 'C:\Program Files (x86)\Windows Kits\10\Include' | Sort-Object Name -Descending | Select-Object -First 1 -ExpandProperty Name; \
    $libPath = Get-ChildItem 'C:\Program Files (x86)\Windows Kits\10\Lib' | Sort-Object Name -Descending | Select-Object -First 1 -ExpandProperty Name; \
    $env:PATH = $env:PATH + ';' + $msvcPath + '\bin\Hostx64\x64'; \
    $env:INCLUDE = $msvcPath + '\include;C:\Program Files (x86)\Windows Kits\10\Include\' + $sdkPath + '\ucrt;C:\Program Files (x86)\Windows Kits\10\Include\' + $sdkPath + '\um;C:\Program Files (x86)\Windows Kits\10\Include\' + $sdkPath + '\shared'; \
    $env:LIB = $msvcPath + '\lib\x64;C:\Program Files (x86)\Windows Kits\10\Lib\' + $libPath + '\ucrt\x64;C:\Program Files (x86)\Windows Kits\10\Lib\' + $libPath + '\um\x64'; \
    cl /c /O2 /MT /DSQLITE_ENABLE_COLUMN_METADATA=1 /DSQLITE_ENABLE_RTREE=1 /DSQLITE_THREADSAFE=1 /DSQLITE_ENABLE_FTS3=1 /DSQLITE_ENABLE_FTS4=1 /DSQLITE_ENABLE_FTS5=1 sqlite3.c; \
    lib sqlite3.obj /OUT:sqlite3_static.lib; \
    cl /O2 /MT /DSQLITE_ENABLE_COLUMN_METADATA=1 /DSQLITE_ENABLE_RTREE=1 /DSQLITE_THREADSAFE=1 /DSQLITE_ENABLE_FTS3=1 /DSQLITE_ENABLE_FTS4=1 /DSQLITE_ENABLE_FTS5=1 sqlite3.c shell.c /Fe:sqlite3.exe; \
    mkdir C:\local\include, C:\local\lib, C:\local\bin -Force; \
    copy sqlite3.h C:\local\include\; \
    copy sqlite3ext.h C:\local\include\ -ErrorAction SilentlyContinue; \
    copy sqlite3_static.lib C:\local\lib\sqlite3.lib; \
    copy sqlite3.exe C:\local\bin\; \
    Write-Host "SQLite built successfully"

# Switch to cmd for CMake builds
SHELL ["cmd", "/S", "/C"]

# Create environment setup script
RUN echo @echo off > C:\build\setup_env.bat && \
    echo call "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvars64.bat" >> C:\build\setup_env.bat && \
    echo set PATH=C:\local\bin;%%PATH%% >> C:\build\setup_env.bat && \
    echo set CMAKE_PREFIX_PATH=C:\local >> C:\build\setup_env.bat

# Build PROJ (static with /MT)
RUN call C:\build\setup_env.bat && \
    7z x proj.tar.gz && 7z x proj.tar && \
    cd proj-%PROJ_VERSION% && mkdir build && cd build && \
    cmake .. -G "Ninja" \
    -DCMAKE_BUILD_TYPE=Release \
    -DBUILD_SHARED_LIBS=OFF \
    -DCMAKE_INSTALL_PREFIX=C:\local \
    -DCMAKE_C_FLAGS_RELEASE="/MT /O2 /Ob2 /DNDEBUG" \
    -DCMAKE_CXX_FLAGS_RELEASE="/MT /O2 /Ob2 /DNDEBUG /EHsc" \
    -DCMAKE_MSVC_RUNTIME_LIBRARY="MultiThreaded" \
    -DENABLE_TIFF=OFF \
    -DENABLE_CURL=OFF \
    -DBUILD_TESTING=OFF \
    -DBUILD_PROJSYNC=OFF \
    -DBUILD_PROJINFO=OFF \
    -DBUILD_PROJ=OFF \
    -DBUILD_GEOD=OFF \
    -DBUILD_CS2CS=OFF \
    -DBUILD_CCT=OFF \
    -DBUILD_GIE=OFF \
    -DSQLITE3_INCLUDE_DIR=C:\local\include \
    -DSQLITE3_LIBRARY=C:\local\lib\sqlite3.lib && \
    ninja && ninja install

# Build GEOS (static with /MT)
RUN call C:\build\setup_env.bat && \
    7z x geos.tar.bz2 && 7z x geos.tar && \
    cd geos-%GEOS_VERSION% && mkdir build && cd build && \
    cmake .. -G "Ninja" \
    -DCMAKE_BUILD_TYPE=Release \
    -DBUILD_SHARED_LIBS=OFF \
    -DCMAKE_INSTALL_PREFIX=C:\local \
    -DCMAKE_C_FLAGS_RELEASE="/MT /O2 /Ob2 /DNDEBUG" \
    -DCMAKE_CXX_FLAGS_RELEASE="/MT /O2 /Ob2 /DNDEBUG /EHsc" \
    -DCMAKE_MSVC_RUNTIME_LIBRARY="MultiThreaded" \
    -DBUILD_TESTING=OFF \
    -DBUILD_DOCUMENTATION=OFF && \
    ninja && ninja install

# Build GDAL (static with /MT)
RUN call C:\build\setup_env.bat && \
    7z x -tgzip gdal.tar.gz && 7z x gdal.tar && \
    cd gdal-%GDAL_VERSION% && mkdir build && cd build && \
    cmake .. -G "Ninja" \
    -DCMAKE_BUILD_TYPE=Release \
    -DBUILD_SHARED_LIBS=OFF \
    -DCMAKE_INSTALL_PREFIX=C:\local \
    -DCMAKE_C_FLAGS_RELEASE="/MT /O2 /Ob2 /DNDEBUG" \
    -DCMAKE_CXX_FLAGS_RELEASE="/MT /O2 /Ob2 /DNDEBUG /EHsc" \
    -DCMAKE_MSVC_RUNTIME_LIBRARY="MultiThreaded" \
    -DCMAKE_EXE_LINKER_FLAGS="/INCREMENTAL:NO /OPT:REF /OPT:ICF" \
    -DGDAL_USE_INTERNAL_LIBS=ON \
    -DGDAL_USE_SQLITE3=ON \
    -DSQLite3_INCLUDE_DIR=C:\local\include \
    -DSQLite3_LIBRARY=C:\local\lib\sqlite3.lib \
    -DGDAL_USE_PROJ=ON \
    -DPROJ_ROOT=C:\local \
    -DGDAL_USE_GEOS=ON \
    -DGEOS_ROOT=C:\local \
    -DGDAL_USE_ZLIB_INTERNAL=ON \
    -DGDAL_USE_LIBPNG_INTERNAL=ON \
    -DGDAL_USE_JPEG_INTERNAL=ON \
    -DGDAL_USE_GEOTIFF_INTERNAL=ON \
    -DGDAL_USE_TIFF_INTERNAL=ON \
    -DGDAL_USE_ZSTD_INTERNAL=ON \
    -DGDAL_USE_WEBP=OFF \
    -DGDAL_USE_CURL=OFF \
    -DGDAL_USE_EXPAT=OFF \
    -DGDAL_USE_LIBXML2=OFF \
    -DGDAL_USE_OPENCL=OFF \
    -DBUILD_APPS=ON \
    -DGDAL_BUILD_OPTIONAL_DRIVERS=OFF \
    -DGDAL_ENABLE_DRIVER_GTIFF=ON \
    -DGDAL_ENABLE_DRIVER_VRT=ON \
    -DGDAL_ENABLE_DRIVER_GPKG=ON \
    -DGDAL_ENABLE_DRIVER_SHAPEFILE=ON \
    -DGDAL_ENABLE_DRIVER_GEOJSON=ON \
    -DGDAL_ENABLE_DRIVER_MEM=ON \
    -DBUILD_PYTHON_BINDINGS=OFF \
    -DBUILD_JAVA_BINDINGS=OFF \
    -DBUILD_CSHARP_BINDINGS=OFF \
    -DBUILD_TESTING=OFF && \
    ninja && ninja install

# Stage 2: Export stage  
FROM mcr.microsoft.com/windows/nanoserver:ltsc2022 AS export

WORKDIR C:/windows/binaries

# Copy binaries
COPY --from=builder C:/local/bin/gdalinfo.exe ./gdalinfo.exe
COPY --from=builder C:/local/bin/ogr2ogr.exe ./ogr2ogr.exe
COPY --from=builder C:/local/bin/ogrinfo.exe ./ogrinfo.exe
COPY --from=builder C:/local/bin/gdal_rasterize.exe ./gdal_rasterize.exe
COPY --from=builder C:/local/bin/gdal_translate.exe ./gdal_translate.exe

# Copy data files
COPY --from=builder C:/local/share/gdal C:/windows/data/gdal
COPY --from=builder C:/local/share/proj C:/windows/data/proj

ENV GDAL_DATA=C:/gdal-data
ENV PROJ_DATA=C:/proj-data

CMD ["ping", "-t", "localhost"]