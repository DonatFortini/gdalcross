# Stage 1: Cross-compile for Windows
FROM ubuntu:22.04 AS builder

ARG GDAL_VERSION
ARG PROJ_VERSION
ARG GEOS_VERSION
ARG SQLITE_VERSION

ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get update && apt-get install -y \
    build-essential cmake curl pkg-config autoconf automake libtool sqlite3 \
    gcc-mingw-w64-x86-64-posix g++-mingw-w64-x86-64-posix binutils-mingw-w64-x86-64 \
    && rm -rf /var/lib/apt/lists/*

ENV PREFIX=/usr/x86_64-w64-mingw32 \
    CC=x86_64-w64-mingw32-gcc-posix \
    CXX=x86_64-w64-mingw32-g++-posix \
    AR=x86_64-w64-mingw32-ar \
    RANLIB=x86_64-w64-mingw32-ranlib \
    STRIP=x86_64-w64-mingw32-strip

WORKDIR /build

RUN curl -L https://www.sqlite.org/2024/sqlite-autoconf-${SQLITE_VERSION}.tar.gz | tar xz && \
    curl -L https://download.osgeo.org/proj/proj-${PROJ_VERSION}.tar.gz | tar xz && \
    curl -L https://download.osgeo.org/geos/geos-${GEOS_VERSION}.tar.bz2 | tar xj && \
    curl -L https://github.com/OSGeo/gdal/releases/download/v${GDAL_VERSION}/gdal-${GDAL_VERSION}.tar.gz | tar xz

# Build SQLite
RUN cd sqlite-autoconf-${SQLITE_VERSION} && \
    ./configure --host=x86_64-w64-mingw32 --prefix=$PREFIX --disable-shared --enable-static \
    CC=x86_64-w64-mingw32-gcc-posix \
    CFLAGS="-DSQLITE_ENABLE_COLUMN_METADATA=1 -DSQLITE_ENABLE_RTREE=1 -DSQLITE_THREADSAFE=1 -DSQLITE_ENABLE_FTS3=1 -DSQLITE_ENABLE_FTS4=1 -DSQLITE_ENABLE_FTS5=1 -O2 -w" && \
    make -j$(nproc) && make install && cd /build && rm -rf sqlite-autoconf-${SQLITE_VERSION}

# Build GEOS
RUN cd geos-${GEOS_VERSION} && mkdir build && cd build && \
    cmake .. -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_C_COMPILER=x86_64-w64-mingw32-gcc-posix \
    -DCMAKE_CXX_COMPILER=x86_64-w64-mingw32-g++-posix -DCMAKE_INSTALL_PREFIX=$PREFIX \
    -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
    -DBUILD_TESTING=OFF -DBUILD_DOCUMENTATION=OFF -DCMAKE_CXX_FLAGS="-O2 -w" -DCMAKE_C_FLAGS="-O2 -w" && \
    make -j$(nproc) && make install && cd /build && rm -rf geos-${GEOS_VERSION}

# Build PROJ
RUN cd proj-${PROJ_VERSION} && mkdir build && cd build && \
    cmake .. -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_C_COMPILER=x86_64-w64-mingw32-gcc-posix \
    -DCMAKE_CXX_COMPILER=x86_64-w64-mingw32-g++-posix -DCMAKE_INSTALL_PREFIX=$PREFIX \
    -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
    -DENABLE_TIFF=OFF -DENABLE_CURL=OFF -DBUILD_TESTING=OFF \
    -DBUILD_PROJSYNC=OFF -DBUILD_PROJINFO=ON -DBUILD_PROJ=ON -DBUILD_GEOD=ON \
    -DBUILD_CS2CS=ON -DBUILD_CCT=ON -DBUILD_GIE=OFF -DBUILD_APPS=ON \
    -DSQLITE3_INCLUDE_DIR=$PREFIX/include -DSQLITE3_LIBRARY=$PREFIX/lib/libsqlite3.a \
    -DCMAKE_CXX_FLAGS="-O2 -w" -DCMAKE_C_FLAGS="-O2 -w" \
    -DPROJ_DB_EXTRA_VALIDATION=OFF && \
    make -j$(nproc) && make install && cd /build && rm -rf proj-${PROJ_VERSION}

# Build GDAL
RUN cd gdal-${GDAL_VERSION} && \
    sed -i 's/&pszSrcBuf/(char**)\&pszSrcBuf/g' port/cpl_recode_iconv.cpp && \
    mkdir build && cd build && \
    PKG_CONFIG_PATH=$PREFIX/lib/pkgconfig \
    cmake .. -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_C_COMPILER=x86_64-w64-mingw32-gcc-posix \
    -DCMAKE_CXX_COMPILER=x86_64-w64-mingw32-g++-posix -DCMAKE_INSTALL_PREFIX=$PREFIX \
    -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
    -DCMAKE_EXE_LINKER_FLAGS="-static -static-libgcc -static-libstdc++" \
    -DCMAKE_SHARED_LINKER_FLAGS="-static -static-libgcc -static-libstdc++" \
    -DCMAKE_CXX_FLAGS="-O2 -w -Wno-old-style-cast -Wno-error" -DCMAKE_C_FLAGS="-O2 -w" \
    -DGDAL_USE_INTERNAL_LIBS=ON -DGDAL_USE_SQLITE3=ON -DSQLite3_ROOT=$PREFIX \
    -DGDAL_USE_PROJ=ON -DPROJ_ROOT=$PREFIX -DGDAL_USE_GEOS=ON -DGEOS_ROOT=$PREFIX \
    -DGDAL_USE_ZLIB_INTERNAL=ON -DGDAL_USE_LIBPNG_INTERNAL=ON -DGDAL_USE_JPEG_INTERNAL=ON \
    -DGDAL_USE_GEOTIFF_INTERNAL=ON -DGDAL_USE_TIFF_INTERNAL=ON -DGDAL_USE_ZSTD=OFF \
    -DGDAL_USE_ZSTD_INTERNAL=ON -DGDAL_USE_WEBP=OFF -DBUILD_APPS=ON \
    -DGDAL_BUILD_OPTIONAL_DRIVERS=OFF -DGDAL_ENABLE_DRIVER_GTIFF=ON -DGDAL_ENABLE_DRIVER_VRT=ON \
    -DGDAL_ENABLE_DRIVER_GPKG=ON -DGDAL_ENABLE_DRIVER_SHAPEFILE=ON -DGDAL_ENABLE_DRIVER_GEOJSON=ON \
    -DGDAL_ENABLE_DRIVER_MEM=ON -DBUILD_PYTHON_BINDINGS=OFF -DBUILD_JAVA_BINDINGS=OFF \
    -DBUILD_CSHARP_BINDINGS=OFF -DBUILD_TESTING=OFF -DACCEPT_MISSING_SQLITE3_MUTEX_ALLOC=ON \
    -DACCEPT_MISSING_SQLITE3_RTREE=ON && \
    make -j$(nproc) && make install && cd /build && rm -rf gdal-${GDAL_VERSION}

# Stage 2: Extract binaries
FROM ubuntu:22.04

RUN apt-get update && apt-get install -y coreutils && rm -rf /var/lib/apt/lists/*

COPY --from=builder /usr/x86_64-w64-mingw32/bin/gdalinfo.exe /binaries/gdalinfo-x86_64-pc-msvc.exe
COPY --from=builder /usr/x86_64-w64-mingw32/bin/ogr2ogr.exe /binaries/ogr2ogr-x86_64-pc-msvc.exe
COPY --from=builder /usr/x86_64-w64-mingw32/bin/ogrinfo.exe /binaries/ogrinfo-x86_64-pc-msvc.exe
COPY --from=builder /usr/x86_64-w64-mingw32/bin/gdal_rasterize.exe /binaries/gdal_rasterize-x86_64-pc-msvc.exe
COPY --from=builder /usr/x86_64-w64-mingw32/bin/gdal_translate.exe /binaries/gdal_translate-x86_64-pc-msvc.exe
COPY --from=builder /usr/x86_64-w64-mingw32/share/gdal/ /gdal-data/
COPY --from=builder /usr/x86_64-w64-mingw32/share/proj/ /proj-data/

CMD ["tail", "-f", "/dev/null"]