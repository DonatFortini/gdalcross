# Stage 1: Build GDAL and dependencies statically
FROM alpine:3.19 AS static-builder

ARG GDAL_VERSION
ARG PROJ_VERSION
ARG GEOS_VERSION
ARG SQLITE_VERSION

RUN apk update && apk add --no-cache \
    build-base \
    cmake \
    curl \
    tar \
    pkgconfig \
    autoconf \
    automake \
    libtool \
    zlib-dev \
    musl-dev \
    jpeg-dev \
    libpng-dev \
    tiff-dev \
    linux-headers \
    zstd-static

WORKDIR /tmp


RUN curl -L -o sqlite.tar.gz https://www.sqlite.org/2024/sqlite-autoconf-${SQLITE_VERSION}.tar.gz && \
    curl -L -o proj.tar.gz https://download.osgeo.org/proj/proj-${PROJ_VERSION}.tar.gz && \
    curl -L -o geos.tar.bz2 https://download.osgeo.org/geos/geos-${GEOS_VERSION}.tar.bz2 && \
    curl -L -o gdal.tar.gz https://github.com/OSGeo/gdal/releases/download/v${GDAL_VERSION}/gdal-${GDAL_VERSION}.tar.gz

# Build SQLite3 (static) 
RUN tar xzf sqlite.tar.gz && \
    cd sqlite-autoconf-${SQLITE_VERSION} && \
    CFLAGS="-DSQLITE_ENABLE_COLUMN_METADATA=1 -DSQLITE_ENABLE_RTREE=1 -DSQLITE_THREADSAFE=1 -DSQLITE_ENABLE_FTS3=1 -DSQLITE_ENABLE_FTS4=1 -DSQLITE_ENABLE_FTS5=1 -O2 -w" \
    ./configure --prefix=/usr/local --enable-static --disable-shared && \
    make -j$(nproc) && \
    make install && \
    cd /tmp && \
    rm -rf sqlite-autoconf-${SQLITE_VERSION} sqlite.tar.gz

# Build PROJ (static) 
RUN tar xzf proj.tar.gz && \
    cd proj-${PROJ_VERSION} && \
    mkdir build && cd build && \
    CFLAGS="-O2 -w" CXXFLAGS="-O2 -w" \
    cmake .. \
    -DCMAKE_BUILD_TYPE=Release \
    -DBUILD_SHARED_LIBS=OFF \
    -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
    -DCMAKE_INSTALL_PREFIX=/usr/local \
    -DBUILD_TESTING=OFF \
    -DENABLE_CURL=OFF \
    -DENABLE_TIFF=OFF \
    -DBUILD_PROJSYNC=OFF \
    -DBUILD_PROJINFO=OFF \
    -DBUILD_PROJ=OFF \
    -DBUILD_GEOD=OFF \
    -DBUILD_CS2CS=OFF \
    -DBUILD_CCT=OFF \
    -DBUILD_GIE=OFF && \
    make -j$(nproc) && \
    make install && \
    cd /tmp && \
    rm -rf proj-${PROJ_VERSION} proj.tar.gz

# Build GEOS (static) 
RUN tar xjf geos.tar.bz2 && \
    cd geos-${GEOS_VERSION} && \
    mkdir build && cd build && \
    CFLAGS="-O2 -w" CXXFLAGS="-O2 -w" \
    cmake .. \
    -DCMAKE_BUILD_TYPE=Release \
    -DBUILD_SHARED_LIBS=OFF \
    -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
    -DCMAKE_INSTALL_PREFIX=/usr/local \
    -DBUILD_TESTING=OFF \
    -DBUILD_DOCUMENTATION=OFF && \
    make -j$(nproc) && \
    make install && \
    cd /tmp && \
    rm -rf geos-${GEOS_VERSION} geos.tar.bz2

# Build GDAL (static) 
RUN tar xzf gdal.tar.gz && \
    cd gdal-${GDAL_VERSION} && \
    sed -i 's/&pszSrcBuf/(char**)\&pszSrcBuf/g' port/cpl_recode_iconv.cpp && \
    mkdir build && cd build && \
    PKG_CONFIG_PATH=/usr/local/lib/pkgconfig \
    CFLAGS="-O2 -w" \
    CXXFLAGS="-O2 -w -Wno-old-style-cast -Wno-error" \
    cmake .. \
    -DCMAKE_BUILD_TYPE=Release \
    -DBUILD_SHARED_LIBS=OFF \
    -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
    -DCMAKE_EXE_LINKER_FLAGS="-static -static-libgcc -static-libstdc++" \
    -DCMAKE_SHARED_LINKER_FLAGS="-static -static-libgcc -static-libstdc++" \
    -DCMAKE_INSTALL_PREFIX=/usr/local \
    -DGDAL_USE_INTERNAL_LIBS=ON \
    -DGDAL_USE_SQLITE3=ON \
    -DSQLite3_ROOT=/usr/local \
    -DGDAL_USE_PROJ=ON \
    -DPROJ_ROOT=/usr/local \
    -DGDAL_USE_GEOS=ON \
    -DGEOS_ROOT=/usr/local \
    -DGDAL_USE_ZLIB=ON \
    -DGDAL_USE_LIBPNG_INTERNAL=ON \
    -DGDAL_USE_JPEG_INTERNAL=ON \
    -DGDAL_USE_GEOTIFF_INTERNAL=ON \
    -DGDAL_USE_TIFF_INTERNAL=ON \
    -DGDAL_USE_ZSTD=OFF \
    -DGDAL_USE_ZSTD_INTERNAL=ON \
    -DGDAL_USE_WEBP=OFF \
    -DBUILD_APPS=ON \
    -DGDAL_BUILD_OPTIONAL_DRIVERS=OFF \
    -DGDAL_ENABLE_DRIVER_GTIFF=ON \
    -DGDAL_ENABLE_DRIVER_VRT=ON \
    -DGDAL_ENABLE_DRIVER_GPKG=ON \
    -DGDAL_ENABLE_DRIVER_SHAPEFILE=ON \
    -DGDAL_ENABLE_DRIVER_GEOJSON=ON \
    -DGDAL_ENABLE_DRIVER_MEM=ON \
    -DBUILD_PYTHON_BINDINGS=OFF \
    -DBUILD_JAVA_BINDINGS=OFF \
    -DCSHARP_BINDINGS=OFF \
    -DBUILD_TESTING=OFF \
    -DACCEPT_MISSING_SQLITE3_MUTEX_ALLOC=ON \
    -DACCEPT_MISSING_SQLITE3_RTREE=ON && \
    make -j$(nproc) && \
    make install && \
    cd /tmp && \
    rm -rf gdal-${GDAL_VERSION} gdal.tar.gz

# Stage 2: Create container for extraction 
FROM alpine:3.19 AS final
COPY --from=static-builder /usr/local/bin/gdalinfo /binaries/gdalinfo
COPY --from=static-builder /usr/local/bin/ogr2ogr /binaries/ogr2ogr
COPY --from=static-builder /usr/local/bin/ogrinfo /binaries/ogrinfo
COPY --from=static-builder /usr/local/bin/gdal_rasterize /binaries/gdal_rasterize
COPY --from=static-builder /usr/local/bin/gdal_translate /binaries/gdal_translate
COPY --from=static-builder /usr/local/share/gdal /gdal-data/
COPY --from=static-builder /usr/local/share/proj /proj-data/

ENV GDAL_DATA=/gdal-data
ENV PROJ_DATA=/proj-data

# Keep container running for extraction
CMD ["tail", "-f", "/dev/null"]